#!/usr/bin/env python3
import sys
import argparse
import shutil
import tempfile
import os
import time
import re
dir_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(dir_path)
import fealden


def __main__():
    parser = argparse.ArgumentParser()
    parser.add_argument("recSeq", type=str,
                        help="The sequenced recognized by your target \
                        represented as a string comprised of the letters 'a', 'A', 't', \
                        'T', 'c', 'C', 'g', and 'G'.")
    parser.add_argument(
        "bindingState",
        type=int,
        help="The state of the sequence when bound to the target.\
                        \n This is 0 if your target binds to a double stranded sequence\
                        and 1 if it binds to a single stranded sequence.")
    parser.add_argument(
        "-ms",
        "-max_size",
        type=int,
        help="The maximum number of bases allowed in your sensor.\
                        This number must be greater than 20 and should probobly be less \
                        than 50.",
        default=50)
    parser.add_argument(
        "-sps",
        "-sens_per_seed",
        type=int,
        help="The minimum number of potential sensors per seed graph \
                        structure. \n This number should be increased if you\
                        are not getting enough results. (Start by increasing it to 2000, \
                        and increase from there if you are still unsatisfied.)",
        default=500)
    parser.add_argument(
        "-out",
        "-output_file",
        type=str,
        help="The output file to store results.\n Results are written in CSV format.",
        default=f'{time.strftime("%Y%m%d-%H%M%S")}-results.csv')
    parser.add_argument(
        "-i",
        "--interactive",
        action='store_true',
        help="Interactive Mode, no file output.  Limited use on command line.")
    parser.add_argument(
        "-v",
        "-verbose",
        action='store_true',
        help="Output information when each thread starts and completes operation.")
    # TODO: Binding affinity tuning
    # TODO: Anticipated target concentration tuning

    args = parser.parse_args()
    invalidChars = re.compile('[^atgc]', re.IGNORECASE)
    if invalidChars.search(args.recSeq):
        print("Invalid recognition sequence.\nYou must enter a sequence consisisting only of a,c,t,g,A,C,T,G.")
        exit(0)
    if args.bindingState != 0 and args.bindingState != 1:
        print("Invalid binding state. Argument must be 0 or 1. See -h for help.")
        exit(0)
    if args.ms <= 20:
        print("Maximum sensor size is too low, it must be greater than 20.")
        exit(0)
    global verbose
    verbose = args.v
    fealden.fealden.Fealden(
        args.recSeq.lower(),
        args.bindingState,
        args.ms,
        args.sps,
        args.interactive,
        args.out)

# run the program from the command line
if __name__ == "__main__":
    __main__()